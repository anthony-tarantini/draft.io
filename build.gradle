buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE')
        classpath('org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.0-beta-4584')
        classpath('be.filipblondeel.gradle:gradle-gulp-plugin:0.1')
        classpath('com.moowork.gradle:gradle-node-plugin:0.11')
        classpath('org.ajoberstar:gradle-git:1.3.2')
    }
}

configure(subprojects.findAll {it.name != 'app'}) {
    apply plugin: 'java'
    apply plugin: 'idea'

    repositories {
        jcenter()
        maven {
            url "http://repository.jetbrains.com/all"
        }
    }

    sourceCompatibility = 1.8
}

configure(subprojects.findAll {it.name != 'app' && it.name != 'domain'}) {
    apply plugin: 'spring-boot'

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('com.fasterxml.jackson.module:jackson-module-parameter-names:2.6.1')

        testCompile('org.springframework.boot:spring-boot-starter-test'){
            exclude module: 'hamcrest-core'
            exclude module: 'hamcrest-library'
            exclude module: 'mockito-core'
        }
        testCompile('org.mockito:mockito-core:1.10.19')
        testCompile('org.assertj:assertj-core:3.2.0')
        testCompile('junit:junit:4.12') {
            exclude module: 'hamcrest-core'
        }
    }
}

import org.ajoberstar.grgit.Credentials
import org.ajoberstar.grgit.Grgit

ext.repo = Grgit.open(creds: new Credentials(username: "$System.env.GIT_USERNAME", password: "$System.env.GIT_PASSWORD"))

version = "1.0.0-${repo.head().abbreviatedId}"

task unstaged << {
    def unstagedChanges = "git diff --exit-code".execute()
    unstagedChanges.waitFor();
    if (unstagedChanges.exitValue() != 0) {
        throw new GradleException("Please commit or discard all unstaged changes.")
    }
}
task tagRelease << {
    repo.tag.add {
        name = version
        message = "Release of ${version}"
    }
    repo.push(tags: true)
}
task rebase << {repo.pull(rebase: true)}
task push << {repo.push()}

task deliver(type: DefaultTask)
rebase.dependsOn unstaged
push.dependsOn rebase
push.dependsOn ':app:test'
push.dependsOn ':domain:test'
push.dependsOn ':gateway:test'
push.dependsOn ':stats:test'
deliver.dependsOn push